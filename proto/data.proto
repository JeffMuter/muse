syntax = "proto3";

package transcript;

option go_package = "github.com/yourusername/transcript/proto";

// Service definition
service PigeonService {
  rpc ProcessTranscriptSummary (TranscriptSummaryRequest) returns (PigeonTranscriptResponse);
}

service OwlService {
  rpc ProcessWriteRequest (DbWriteRequest) returns (DbWriteResponse);
}

// request to owl service needs this to formulate a valid query to write to the db
message DbWriteRequest {
  string query = 1; // raw sql string
  repeated string params = 2; // contains the variable values like the value of name: "john", escaping allows to avoid sql injection here & type safety before runtime
  string request_id = 3; // helps identify where the request came from "service1 called this in func123", etc..
}

// Owl returns this on request
message DbWriteResponse{
  bool success = 1;
  string error_message = 2;
  int64 affected_rows = 3;
  string generated_id = 4; // for id of new row id if successful
}

message TranscriptRequest {
  string transcript_id = 1;
}

// Response message that contains the transcript summary data
message TranscriptSummaryRequest {
  string transcription_summary = 1;
  repeated TranscriptionTopic transcription_topics = 2;
  repeated TranscriptionAlert transcription_alerts = 3;
  string transcript_id = 4; // Added to identify which transcript this is
}

message TranscriptionTopic {
  string name = 1;
  string description = 2;
}

message TranscriptionAlert {
  string type = 1;
  string description = 2;
  string quote = 3;
}

// New result message for processing confirmation
message PigeonTranscriptResponse {
  bool success = 1;
  string message = 2;
}

