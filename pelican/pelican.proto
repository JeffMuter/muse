syntax = "proto3";
package pkg;
option go_package = "pkg/file";

// FileChunk represents a chunk of the audio file being transferred
message FileChunk {
    // Metadata - sent only in first chunk
    string file_name = 1;
    string content_type = 2;    // e.g. "audio/wav"
    int64 total_size = 3;       // total file size in bytes
    
    // Chunk data
    bytes chunk_data = 4;       // actual file data
    int32 chunk_index = 5;      // sequential chunk number
    bool is_last = 6;           // indicates if this is the last chunk
}

// UploadStatus represents the response from the server after file upload
message UploadStatus {
    bool success = 1;
    string message = 2;         // error message if upload failed
    string file_id = 3;         // unique identifier for the uploaded file
    int64 received_size = 4;    // total bytes received
    string s3_path = 5;         // path where file was stored in S3 (if successful)
}

// Service definition
service AudioFileService {
    // Stream file chunks to server
    rpc UploadFile(stream FileChunk) returns (UploadStatus);
    
    // Optional: Add health check endpoint
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Health check messages
message HealthCheckRequest {}

message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
}
