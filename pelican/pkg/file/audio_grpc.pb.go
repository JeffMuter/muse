// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: pelican/pkg/file/audio.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AudioStreamService_StreamAudio_FullMethodName = "/muse.pelican.pkg.file.AudioStreamService/StreamAudio"
)

// AudioStreamServiceClient is the client API for AudioStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioStreamServiceClient interface {
	// Stream audio packets from the RTSP server to the downstream service
	StreamAudio(ctx context.Context, opts ...grpc.CallOption) (AudioStreamService_StreamAudioClient, error)
}

type audioStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioStreamServiceClient(cc grpc.ClientConnInterface) AudioStreamServiceClient {
	return &audioStreamServiceClient{cc}
}

func (c *audioStreamServiceClient) StreamAudio(ctx context.Context, opts ...grpc.CallOption) (AudioStreamService_StreamAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioStreamService_ServiceDesc.Streams[0], AudioStreamService_StreamAudio_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &audioStreamServiceStreamAudioClient{stream}
	return x, nil
}

type AudioStreamService_StreamAudioClient interface {
	Send(*AudioPacket) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type audioStreamServiceStreamAudioClient struct {
	grpc.ClientStream
}

func (x *audioStreamServiceStreamAudioClient) Send(m *AudioPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioStreamServiceStreamAudioClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioStreamServiceServer is the server API for AudioStreamService service.
// All implementations must embed UnimplementedAudioStreamServiceServer
// for forward compatibility
type AudioStreamServiceServer interface {
	// Stream audio packets from the RTSP server to the downstream service
	StreamAudio(AudioStreamService_StreamAudioServer) error
	mustEmbedUnimplementedAudioStreamServiceServer()
}

// UnimplementedAudioStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioStreamServiceServer struct {
}

func (UnimplementedAudioStreamServiceServer) StreamAudio(AudioStreamService_StreamAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudio not implemented")
}
func (UnimplementedAudioStreamServiceServer) mustEmbedUnimplementedAudioStreamServiceServer() {}

// UnsafeAudioStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioStreamServiceServer will
// result in compilation errors.
type UnsafeAudioStreamServiceServer interface {
	mustEmbedUnimplementedAudioStreamServiceServer()
}

func RegisterAudioStreamServiceServer(s grpc.ServiceRegistrar, srv AudioStreamServiceServer) {
	s.RegisterService(&AudioStreamService_ServiceDesc, srv)
}

func _AudioStreamService_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioStreamServiceServer).StreamAudio(&audioStreamServiceStreamAudioServer{stream})
}

type AudioStreamService_StreamAudioServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*AudioPacket, error)
	grpc.ServerStream
}

type audioStreamServiceStreamAudioServer struct {
	grpc.ServerStream
}

func (x *audioStreamServiceStreamAudioServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioStreamServiceStreamAudioServer) Recv() (*AudioPacket, error) {
	m := new(AudioPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioStreamService_ServiceDesc is the grpc.ServiceDesc for AudioStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "muse.pelican.pkg.file.AudioStreamService",
	HandlerType: (*AudioStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _AudioStreamService_StreamAudio_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pelican/pkg/file/audio.proto",
}
