// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: pelican.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AudioFileService_UploadFile_FullMethodName  = "/file.AudioFileService/UploadFile"
	AudioFileService_HealthCheck_FullMethodName = "/file.AudioFileService/HealthCheck"
)

// AudioFileServiceClient is the client API for AudioFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioFileServiceClient interface {
	// Stream file chunks to server
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (AudioFileService_UploadFileClient, error)
	// Optional: Add health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type audioFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioFileServiceClient(cc grpc.ClientConnInterface) AudioFileServiceClient {
	return &audioFileServiceClient{cc}
}

func (c *audioFileServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (AudioFileService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioFileService_ServiceDesc.Streams[0], AudioFileService_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &audioFileServiceUploadFileClient{stream}
	return x, nil
}

type AudioFileService_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type audioFileServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *audioFileServiceUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioFileServiceUploadFileClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *audioFileServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AudioFileService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioFileServiceServer is the server API for AudioFileService service.
// All implementations must embed UnimplementedAudioFileServiceServer
// for forward compatibility
type AudioFileServiceServer interface {
	// Stream file chunks to server
	UploadFile(AudioFileService_UploadFileServer) error
	// Optional: Add health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedAudioFileServiceServer()
}

// UnimplementedAudioFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioFileServiceServer struct {
}

func (UnimplementedAudioFileServiceServer) UploadFile(AudioFileService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedAudioFileServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAudioFileServiceServer) mustEmbedUnimplementedAudioFileServiceServer() {}

// UnsafeAudioFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioFileServiceServer will
// result in compilation errors.
type UnsafeAudioFileServiceServer interface {
	mustEmbedUnimplementedAudioFileServiceServer()
}

func RegisterAudioFileServiceServer(s grpc.ServiceRegistrar, srv AudioFileServiceServer) {
	s.RegisterService(&AudioFileService_ServiceDesc, srv)
}

func _AudioFileService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioFileServiceServer).UploadFile(&audioFileServiceUploadFileServer{stream})
}

type AudioFileService_UploadFileServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type audioFileServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *audioFileServiceUploadFileServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioFileServiceUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AudioFileService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioFileServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioFileService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioFileServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioFileService_ServiceDesc is the grpc.ServiceDesc for AudioFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.AudioFileService",
	HandlerType: (*AudioFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AudioFileService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _AudioFileService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pelican.proto",
}
