// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: proto/data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PigeonService_ProcessTranscriptSummary_FullMethodName = "/transcript.PigeonService/ProcessTranscriptSummary"
)

// PigeonServiceClient is the client API for PigeonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PigeonServiceClient interface {
	ProcessTranscriptSummary(ctx context.Context, in *TranscriptSummaryRequest, opts ...grpc.CallOption) (*PigeonTranscriptResponse, error)
}

type pigeonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPigeonServiceClient(cc grpc.ClientConnInterface) PigeonServiceClient {
	return &pigeonServiceClient{cc}
}

func (c *pigeonServiceClient) ProcessTranscriptSummary(ctx context.Context, in *TranscriptSummaryRequest, opts ...grpc.CallOption) (*PigeonTranscriptResponse, error) {
	out := new(PigeonTranscriptResponse)
	err := c.cc.Invoke(ctx, PigeonService_ProcessTranscriptSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PigeonServiceServer is the server API for PigeonService service.
// All implementations must embed UnimplementedPigeonServiceServer
// for forward compatibility
type PigeonServiceServer interface {
	ProcessTranscriptSummary(context.Context, *TranscriptSummaryRequest) (*PigeonTranscriptResponse, error)
	mustEmbedUnimplementedPigeonServiceServer()
}

// UnimplementedPigeonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPigeonServiceServer struct {
}

func (UnimplementedPigeonServiceServer) ProcessTranscriptSummary(context.Context, *TranscriptSummaryRequest) (*PigeonTranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTranscriptSummary not implemented")
}
func (UnimplementedPigeonServiceServer) mustEmbedUnimplementedPigeonServiceServer() {}

// UnsafePigeonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PigeonServiceServer will
// result in compilation errors.
type UnsafePigeonServiceServer interface {
	mustEmbedUnimplementedPigeonServiceServer()
}

func RegisterPigeonServiceServer(s grpc.ServiceRegistrar, srv PigeonServiceServer) {
	s.RegisterService(&PigeonService_ServiceDesc, srv)
}

func _PigeonService_ProcessTranscriptSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscriptSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PigeonServiceServer).ProcessTranscriptSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PigeonService_ProcessTranscriptSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PigeonServiceServer).ProcessTranscriptSummary(ctx, req.(*TranscriptSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PigeonService_ServiceDesc is the grpc.ServiceDesc for PigeonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PigeonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transcript.PigeonService",
	HandlerType: (*PigeonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTranscriptSummary",
			Handler:    _PigeonService_ProcessTranscriptSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data.proto",
}

const (
	OwlService_ProcessWriteRequest_FullMethodName = "/transcript.OwlService/ProcessWriteRequest"
)

// OwlServiceClient is the client API for OwlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OwlServiceClient interface {
	ProcessWriteRequest(ctx context.Context, in *DbWriteRequest, opts ...grpc.CallOption) (*DbWriteResponse, error)
}

type owlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOwlServiceClient(cc grpc.ClientConnInterface) OwlServiceClient {
	return &owlServiceClient{cc}
}

func (c *owlServiceClient) ProcessWriteRequest(ctx context.Context, in *DbWriteRequest, opts ...grpc.CallOption) (*DbWriteResponse, error) {
	out := new(DbWriteResponse)
	err := c.cc.Invoke(ctx, OwlService_ProcessWriteRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OwlServiceServer is the server API for OwlService service.
// All implementations must embed UnimplementedOwlServiceServer
// for forward compatibility
type OwlServiceServer interface {
	ProcessWriteRequest(context.Context, *DbWriteRequest) (*DbWriteResponse, error)
	mustEmbedUnimplementedOwlServiceServer()
}

// UnimplementedOwlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOwlServiceServer struct {
}

func (UnimplementedOwlServiceServer) ProcessWriteRequest(context.Context, *DbWriteRequest) (*DbWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWriteRequest not implemented")
}
func (UnimplementedOwlServiceServer) mustEmbedUnimplementedOwlServiceServer() {}

// UnsafeOwlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OwlServiceServer will
// result in compilation errors.
type UnsafeOwlServiceServer interface {
	mustEmbedUnimplementedOwlServiceServer()
}

func RegisterOwlServiceServer(s grpc.ServiceRegistrar, srv OwlServiceServer) {
	s.RegisterService(&OwlService_ServiceDesc, srv)
}

func _OwlService_ProcessWriteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwlServiceServer).ProcessWriteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwlService_ProcessWriteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwlServiceServer).ProcessWriteRequest(ctx, req.(*DbWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OwlService_ServiceDesc is the grpc.ServiceDesc for OwlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OwlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transcript.OwlService",
	HandlerType: (*OwlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessWriteRequest",
			Handler:    _OwlService_ProcessWriteRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data.proto",
}
